 public string Encrypt(string plaintext, string key )
 {
     byte[] encrypted;
     byte[] keys=Encoding.Unicode.GetBytes(key);
     using (AesCryptoServiceProvider aes = new AesCryptoServiceProvider())
     {
         aes.Key = keys;

         aes.GenerateIV(); // The get method of the 'IV' property of the 'SymmetricAlgorithm' automatically generates an IV if it is has not been generate before. 

         aes.Mode = CipherMode.CBC;
         aes.Padding = PaddingMode.PKCS7;

         using (MemoryStream msEncrypt = new MemoryStream())
         {
             msEncrypt.Write(aes.IV, 0, aes.IV.Length);
             ICryptoTransform encoder = aes.CreateEncryptor();
             using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encoder, CryptoStreamMode.Write))
             using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
             {
                 swEncrypt.Write(plaintext);
             }
             encrypted = msEncrypt.ToArray();
         }
     }

     return Convert.ToBase64String( encrypted);
 }

 public string Decrypt(string cipherText, string key)
 {
     string decrypted;
     byte[] keys = Encoding.Unicode.GetBytes(key);

     using (AesCryptoServiceProvider aes = new AesCryptoServiceProvider())
     {
         // Setting a key size disposes the previously-set key. 
         // Setting a key size will generate a new key. 
         // Setting a key size is redundant if a key going to be set after this statement. 
         // aes.KeySize = 256; 

         aes.Key = keys;
         aes.Mode = CipherMode.CBC;
         aes.Padding = PaddingMode.PKCS7;

         using (MemoryStream msDecryptor = new MemoryStream(Convert.FromBase64String(cipherText)))
         {
             byte[] readIV = new byte[16];
             msDecryptor.Read(readIV, 0, 16);
             aes.IV = readIV;
             ICryptoTransform decoder = aes.CreateDecryptor();
             using (CryptoStream csDecryptor = new CryptoStream(msDecryptor, decoder, CryptoStreamMode.Read))
             using (StreamReader srReader = new StreamReader(csDecryptor))
             {
                 decrypted = srReader.ReadToEnd();
             }
         }
     }
     return decrypted;
 }

 public string Encrypt(string plainText)
 {
     return Encrypt(plainText, EncryptDecryptKey);
 }

 public string Decrypt(string cipherText)
 {
     return Decrypt(cipherText, EncryptDecryptKey);
 }

 public string Encrypt(object plainText)
 {
     return Encrypt(JsonConvert.SerializeObject(plainText));
 }
